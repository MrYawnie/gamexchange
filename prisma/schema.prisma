datasource db {
  provider  = "mongodb"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ObjectType {
  boardgame
  boardgameexpansion
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  bggUserName   String?    @unique
  accounts      Account[]
  sessions      Session[]
  games         UserGame[] // Relation to UserGame model (stores the game link)

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserGame {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  userId String   @db.ObjectId
  gameId String   @db.ObjectId // References GameData model
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  game   GameData @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
}

model GameData {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  gameId        String      @unique
  objectType    ObjectType
  name          String
  yearPublished Int?
  image         String
  thumbnail     String
  stats         GameStats // Embedded type for game stats
  ratings       GameRatings // Embedded type for game ratings
  UserGame      UserGame[]

  @@index([name, yearPublished], name: "game_name_year_idx")
}

type GameStats {
  minPlayers  Int?
  minPlaytime Int?
  maxPlaytime Int?
  playingTime Int?
}

type GameRatings {
  usersRated   Int?
  average      Float?
  bayesAverage Float?
  stddev       Float?
  median       Float?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
